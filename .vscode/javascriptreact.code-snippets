{
/// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
/// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
/// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
/// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
/// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
/// Placeholders with the same ids are connected.
/// Example:
/// "Print to console": {
/// 	"scope": "javascript,typescript",
/// 	"prefix": "log",
/// 	"body": [
/// 		"console.log('$1');",
/// 		"$2"
/// 	],
/// 	"description": "Log output to console"
/// }

///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/// IMPORT
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"import : style" : {
	"scope"  : "javascript,javascriptreact",
	"prefix" : "import--style",
	"body"   : [
		"import 'styles/${1:module}';${0}",
	],
},
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/// IMPORTS
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"imports : styles" : {
	"scope"  : "javascript,javascriptreact",
	"prefix" : "imports--styles",
	"body"   : [
		"/// styles ///",
		"import 'styles/${1:module}';",
	],
},
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/// COMPONENT MODULES
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"react component module as class" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component-module--class",
	"body"   : [
		"/// external modules ///",
		"import React from 'react';",
		"",
		"/***************************************",
		"  MAIN",
		"***************************************/",
		"class ${1:${TM_FILENAME_BASE:MyComponent}} extends React.Component {",
		"  /***************************************",
		"    lifecycle",
		"  ***************************************/",
		"  constructor (${2:props}) {",
		"    /* DEV */ console.log (`>>> ${1} : constructing... <<<`);",
		"    super (${3:${2}});",
		"    this.state = {",
		"    };",
		"  };",
		"",
		"  componentDidMount () {",
		"    /* DEV */ console.log (`>>> ${1} : did mount... <<<`);",
		"  };",
		"",
		"  componentDidUpdate () {",
		"    /* DEV */ console.log (`>>> ${1} : did update... <<<`);",
		"  };",
		"",
		"  componentWillUnmount () {",
		"    /* DEV */ console.log (`>>> ${1} : will unmount... <<<`);",
		"  };",
		"",
		"  render () {",
		"    /* DEV */ console.log (`>>> ${1} : rendering... <<<`);",
		"    return (",
		"      ${0:<div className='${1}'>${1}</div>}",
		"    );",
		"  };",
		"",
		"  /***************************************",
		"    ...rest",
		"  ***************************************/",
		"",
		"",
		"  /**************************************/",
		"};",
		"",
		"/**************************************/",
		"",
		"export default ${1};",
		"",
	],
},
"react component module as arrow-to-block" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component-module--arrow-to-block",
	"body"   : [
		"/// external modules ///",
		"import React from 'react';",
		"",
		"/***************************************",
		"  MAIN",
		"***************************************/",
		"const ${1:${TM_FILENAME_BASE:MyComponent}} = (${2:props}) => {",
		"  return (",
		"    ${0:<div className='${1}'>${1}</div>}",
		"  );",
		"};",
		"",
		"/**************************************/",
		"",
		"export default ${1};",
		"",
	],
},
"react component module as arrow-to-expression" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component-module--arrow-to-expression",
	"body"   : [
		"/// external modules ///",
		"import React from 'react';",
		"",
		"/***************************************",
		"  MAIN",
		"***************************************/",
		"const ${1:${TM_FILENAME_BASE:MyComponent}} = (${2:props}) => (",
		"  ${0:<div className='${1}'>${1}</div>}",
		");",
		"",
		"/**************************************/",
		"",
		"export default ${1};",
		"",
	],
},
"react component module as function-block" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component-module--function-block",
	"body"   : [
		"/// external modules ///",
		"import React from 'react';",
		"",
		"/***************************************",
		"  MAIN",
		"***************************************/",
		"function ${1:${TM_FILENAME_BASE:MyComponent}} (${2:props}) {",
		"  return (",
		"    ${0:<div className='${1}'>${1}</div>}",
		"  );",
		"};",
		"",
		"/**************************************/",
		"",
		"export default ${1};",
		"",
	],
},
"react component module as function-expression" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component-module--function-expression",
	"body"   : [
		"/// external modules ///",
		"import React from 'react';",
		"",
		"/***************************************",
		"  MAIN",
		"***************************************/",
		"const ${1:${TM_FILENAME_BASE:MyComponent}} = function (${2:props}) {",
		"  return (",
		"    ${0:<div className='${1}'>${1}</div>}",
		"  );",
		"};",
		"",
		"/**************************************/",
		"",
		"export default ${1};",
		"",
	],
},
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/// COMPONENTS
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"react component as class" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component--class",
	"body"   : [
		"class ${1:${TM_FILENAME_BASE:MyComponent}} extends React.Component {",
		"  /***************************************",
		"    lifecycle",
		"  ***************************************/",
		"  constructor (${2:props}) {",
		"    /* DEV */ console.log (`>>> ${1} : constructing... <<<`);",
		"    super (${3:${2}});",
		"    this.state = {",
		"    };",
		"  };",
		"",
		"  componentDidMount () {",
		"    /* DEV */ console.log (`>>> ${1} : did mount... <<<`);",
		"  };",
		"",
		"  componentDidUpdate () {",
		"    /* DEV */ console.log (`>>> ${1} : did update... <<<`);",
		"  };",
		"",
		"  componentWillUnmount () {",
		"    /* DEV */ console.log (`>>> ${1} : will unmount... <<<`);",
		"  };",
		"",
		"  render () {",
		"    /* DEV */ console.log (`>>> ${1} : rendering... <<<`);",
		"    return (",
		"      ${0:<div className='${1}'>${1}</div>}",
		"    );",
		"  };",
		"",
		"  /***************************************",
		"    ...rest",
		"  ***************************************/",
		"",
		"",
		"  /**************************************/",
		"};",
	],
},
"react component as arrow-to-block" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component--arrow-to-block",
	"body"   : [
		"const ${1:${TM_FILENAME_BASE:MyComponent}} = (${2:props}) => {",
		"  return (",
		"    ${0:<div className='${1}'>${1}</div>}",
		"  );",
		"};",
	],
},
"react component as arrow-to-expression" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component--arrow-to-expression",
	"body"   : [
		"const ${1:${TM_FILENAME_BASE:MyComponent}} = (${2:props}) => (",
		"  ${0:<div className='${1}'>${1}</div>}",
		");",
	],
},
"react component as function-block" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component--function-block",
	"body"   : [
		"function ${1:${TM_FILENAME_BASE:MyComponent}} (${2:props}) {",
		"  return (",
		"    ${0:<div className='${1}'>${1}</div>}",
		"  );",
		"};",
	],
},
"react component as function-expression" : {
	"scope"  : "javascriptreact",
	"prefix" : "react-component--function-expression",
	"body"   : [
		"const ${1:${TM_FILENAME_BASE:MyComponent}} = function (${2:props}) {",
		"  return (",
		"    ${0:<div className='${1}'>${1}</div>}",
		"  );",
		"};",
	],
},
///%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
}
